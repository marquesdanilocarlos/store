# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    upload_dir: '%kernel.project_dir%/uploads'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        #Também é permitido passar o bind para tipar o valor do parâmtro, para todos os serviços que contenham esse
        #parâmetro definido
        #bind:
        #   'bool $hasLog': false

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    #Nome do serviço
    #App\Service\UploadService:
    #    autowire: false
    #    bind:
    #        '$uploadDir': '%upload_dir%'
    #        'bool $hasLog': true
    #        'Psr\Log\LoggerInterface $logger': '@monolog.logger'

    App\Service\UploadService: '@app.uploader'
    #apelido do serviço
    app.uploader:
        class: 'App\Service\UploadService'
        arguments:
            $uploadDir: '%upload_dir%'
            $hasLog: true
            #Definição de qual serviço será passado para o argumento "$logger", já que muitos serviços implementam a
            #LoggerInterface
            $logger: '@monolog.logger.event'
        #alias: 'App\Service\UploadService'
        #Define se o serviço é acessado diretamente pelo container ($container->get())
        public: true

    #app.exception.listener:
    #  class: App\EventListener\ExceptionListener
    #  tags: [kernel.event_listener]

    app.exception.subscriber:
        class: App\EventSubscriber\ExceptionSubscriber
        tags: [kernel.event_subscriber]

